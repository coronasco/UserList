{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","website","react_default","a","createElement","className","src","concat","alt","CardList","_ref","users","cardArray","map","user","index","key","SearchBox","search","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","e","target","value","_this2","fetch","then","res","json","data","_this3","filteredUsers","filter","toLowerCase","includes","length","components_ErrorBoundry","components_CardList","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAEe,SAASA,EAAKC,GAAO,IAC1BC,EAA6BD,EAA7BC,GAAIC,EAAyBF,EAAzBE,KAAMC,EAAmBH,EAAnBG,MAAOC,EAAYJ,EAAZI,QAEzB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BT,EAA1B,iBAA6CU,IAAI,WACzDN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,GACJE,EAAAC,EAAAC,cAAA,SAAIH,KCPZ,IAeeQ,EAfE,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MACZC,EAAYD,EAAME,IAAI,SAACC,EAAMC,GACjC,OACEb,EAAAC,EAAAC,cAACR,EAAD,CACEoB,IAAKD,EACLjB,GAAIa,EAAMI,GAAOjB,GACjBC,KAAMY,EAAMI,GAAOhB,KACnBC,MAAOW,EAAMI,GAAOf,MACpBC,QAASU,EAAMI,GAAOd,YAI5B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYO,ICdrB,SAASK,EAATP,GAA6CA,EAAxBQ,OAAwB,IAAhBC,EAAgBT,EAAhBS,aAC1C,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,SAASC,YAAY,eAAeC,SAAUH,KCHjD,SAASI,EAAO1B,GAC7B,OACEK,EAAAC,EAAAC,cAAA,OACEoB,MAAO,CACLC,UAAW,SACXC,OAAQ,SAGT7B,EAAM8B,cCaEC,cApBb,SAAAA,EAAY/B,GAAO,IAAAgC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMnC,KACDuC,MAAQ,CACXC,UAAU,GAHKR,iFAODS,EAAOC,GACvBP,KAAKQ,SAAS,CAAEH,UAAU,qCAI1B,OAAIL,KAAKI,MAAMC,SACNnC,EAAAC,EAAAC,cAAA,uCAGF4B,KAAKnC,MAAM8B,gBAjBKc,aCuDZC,cA/Cb,SAAAA,IAAc,IAAAb,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACZb,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,QAiBFW,eAAiB,SAAAC,GACff,EAAKW,SAAS,CAAEtB,OAAQ0B,EAAEC,OAAOC,SAjBjCjB,EAAKO,MAAQ,CACXzB,MAAO,GACPO,OAAQ,IAJEW,mFAQM,IAAAkB,EAAAf,KAClBgB,MAAM,+CACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OACRL,EAAKP,SAAS,CACZ7B,MAAOyC,uCASN,IAAAC,EAAArB,KACDsB,EAAgBtB,KAAKI,MAAMzB,MAAM4C,OAAO,SAAAzC,GAC5C,OAAOA,EAAKf,KAAKyD,cAAcC,SAASJ,EAAKjB,MAAMlB,OAAOsC,iBAG5D,OAAKxB,KAAKI,MAAMzB,MAAM+C,OAIlBxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,QAChBH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAACa,EAAD,CAAWE,aAAca,KAAKW,kBAEhCzC,EAAAC,EAAAC,cAACmB,EAAD,KACErB,EAAAC,EAAAC,cAACuD,EAAD,KACEzD,EAAAC,EAAAC,cAACwD,EAAD,CAAUjD,MAAO2C,OAVlBpD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,kBA7BKwD,IAAMpB,WCGJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.88096b4a.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Card(props) {\n  const { id, name, email, website } = props;\n\n  return (\n    <div className=\"pa3 card\">\n      <img src={`https://robohash.org/${id}?size=150x150`} alt=\"avatar\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n        <p>{website}</p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Card from \"./Card\";\n\nconst CardList = ({ users }) => {\n  const cardArray = users.map((user, index) => {\n    return (\n      <Card\n        key={index}\n        id={users[index].id}\n        name={users[index].name}\n        email={users[index].email}\n        website={users[index].website}\n      />\n    );\n  });\n  return <div className=\"cardList\">{cardArray}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nexport default function SearchBox({ search, searchChange }) {\n  return (\n    <div className=\"pa2 search\">\n      <input type=\"search\" placeholder=\"Search Users\" onChange={searchChange} />\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Scroll(props) {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        height: \"75vh\"\n      }}\n    >\n      {props.children}\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops... there's an error</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/CardList\";\n\nimport SearchBox from \"./components/SearchBox\";\nimport Scroll from \"./components/Scroll\";\n\nimport ErrorBoundry from \"./components/ErrorBoundry\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      search: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users/\")\n      .then(res => res.json())\n      .then(data =>\n        this.setState({\n          users: data\n        })\n      );\n  }\n\n  onSearchChange = e => {\n    this.setState({ search: e.target.value });\n  };\n\n  render() {\n    const filteredUsers = this.state.users.filter(user => {\n      return user.name.toLowerCase().includes(this.state.search.toLowerCase());\n    });\n\n    if (!this.state.users.length) {\n      return <h1 className=\"loadingBar\">Loading</h1>;\n    } else {\n      return (\n        <div className=\"App\">\n          <header className=\"pa-4\">\n            <h1>Users List</h1>\n            <SearchBox searchChange={this.onSearchChange} />\n          </header>\n          <Scroll>\n            <ErrorBoundry>\n              <CardList users={filteredUsers} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}